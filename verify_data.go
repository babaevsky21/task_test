package main

import (
	"crypto-watcher/internal/config"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	_ "github.com/lib/pq"
)

func main() {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("==========================================")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	cfg := config.Load()
	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)

	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	if err := db.Ping(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ ping –ë–î: %v", err)
	}

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	fmt.Println("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ watchlist:")
	showWatchlist(db)

	fmt.Println("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ price_history:")
	showPriceHistory(db)

	// –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
	fmt.Println("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
	time.Sleep(3 * time.Second)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
	fmt.Println("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:")

	// 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É
	fmt.Println("\n1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ DOGE –≤ watchlist...")
	err = addCoin("DOGE")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è DOGE: %v\n", err)
	} else {
		fmt.Println("‚úÖ DOGE —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
	}

	// 2. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É
	fmt.Println("\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ADA –≤ watchlist...")
	err = addCoin("ADA")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ADA: %v\n", err)
	} else {
		fmt.Println("‚úÖ ADA —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	time.Sleep(2 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
	fmt.Println("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ watchlist –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
	showWatchlist(db)

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Ü–µ–Ω
	fmt.Println("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Ü–µ–Ω (15 —Å–µ–∫—É–Ω–¥)...")
	time.Sleep(15 * time.Second)

	fmt.Println("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ price_history –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Ü–µ–Ω:")
	showPriceHistory(db)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
	fmt.Println("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã...")
	timestamp := time.Now().Unix()
	price, err := getPrice("DOGE", timestamp)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã DOGE: %v\n", err)
	} else {
		fmt.Printf("‚úÖ –¶–µ–Ω–∞ DOGE –Ω–∞ timestamp %d: $%.2f\n", timestamp, price)
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}

func showWatchlist(db *sql.DB) {
	rows, err := db.Query("SELECT coin, created_at FROM watchlist ORDER BY created_at")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ watchlist: %v\n", err)
		return
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var coin string
		var createdAt time.Time
		if err := rows.Scan(&coin, &createdAt); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
			continue
		}
		fmt.Printf("  - %s (–¥–æ–±–∞–≤–ª–µ–Ω: %s)\n", coin, createdAt.Format("2006-01-02 15:04:05"))
		count++
	}

	if count == 0 {
		fmt.Println("  (–ø—É—Å—Ç–æ)")
	} else {
		fmt.Printf("–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –≤ watchlist: %d\n", count)
	}
}

func showPriceHistory(db *sql.DB) {
	rows, err := db.Query("SELECT coin, price, timestamp, created_at FROM price_history ORDER BY created_at DESC LIMIT 10")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ price_history: %v\n", err)
		return
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var coin string
		var price float64
		var timestamp int64
		var createdAt time.Time
		if err := rows.Scan(&coin, &price, &timestamp, &createdAt); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
			continue
		}
		fmt.Printf("  - %s: $%.2f (timestamp: %d, –∑–∞–ø–∏—Å–∞–Ω–æ: %s)\n",
			coin, price, timestamp, createdAt.Format("2006-01-02 15:04:05"))
		count++
	}

	if count == 0 {
		fmt.Println("  (–ø—É—Å—Ç–æ)")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	var total int
	err = db.QueryRow("SELECT COUNT(*) FROM price_history").Scan(&total)
	if err == nil {
		fmt.Printf("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ price_history: %d\n", total)
	}
}

func addCoin(coin string) error {
	payload := fmt.Sprintf(`{"coin": "%s"}`, coin)
	resp, err := http.Post("http://localhost:8080/currency/add",
		"application/json", strings.NewReader(payload))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("HTTP %d", resp.StatusCode)
	}

	return nil
}

func getPrice(coin string, timestamp int64) (float64, error) {
	url := fmt.Sprintf("http://localhost:8080/currency/price?coin=%s&timestamp=%d", coin, timestamp)
	resp, err := http.Get(url)
	if err != nil {
		return 0, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return 0, fmt.Errorf("HTTP %d", resp.StatusCode)
	}

	var result struct {
		Price float64 `json:"price"`
	}

	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return 0, err
	}

	return result.Price, nil
}
