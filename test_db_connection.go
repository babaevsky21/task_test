package main

import (
	"crypto-watcher/internal/config"
	"database/sql"
	"fmt"
	"log"

	_ "github.com/lib/pq"
)

func main() {
	fmt.Println("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")

	cfg := config.Load()
	fmt.Printf("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n")
	fmt.Printf("Host: %s\n", cfg.DBHost)
	fmt.Printf("Port: %s\n", cfg.DBPort)
	fmt.Printf("User: %s\n", cfg.DBUser)
	fmt.Printf("Database: %s\n", cfg.DBName)

	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ –±–∞–∑–µ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã task
	postgresConnStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=postgres sslmode=disable",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword)

	fmt.Println("\n1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö postgres...")
	postgresDB, err := sql.Open("postgres", postgresConnStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ postgres: %v", err)
	}
	defer postgresDB.Close()

	if err := postgresDB.Ping(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ ping postgres: %v", err)
	}

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ postgres!")

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö task
	var exists bool
	err = postgresDB.QueryRow("SELECT EXISTS(SELECT datname FROM pg_catalog.pg_database WHERE datname = $1)", cfg.DBName).Scan(&exists)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	if !exists {
		fmt.Printf("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º...\n", cfg.DBName)
		_, err = postgresDB.Exec(fmt.Sprintf("CREATE DATABASE %s", cfg.DBName))
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
		fmt.Printf("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n", cfg.DBName)
	} else {
		fmt.Printf("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n", cfg.DBName)
	}

	// –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	taskConnStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)

	fmt.Printf("\n2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '%s'...\n", cfg.DBName)
	taskDB, err := sql.Open("postgres", taskConnStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö %s: %v", cfg.DBName, err)
	}
	defer taskDB.Close()

	if err := taskDB.Ping(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ ping –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö %s: %v", cfg.DBName, err)
	}

	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö '%s'!\n", cfg.DBName)

	// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã
	var tableCount int
	err = taskDB.QueryRow("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name IN ('watchlist', 'price_history')").Scan(&tableCount)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: %v", err)
	} else {
		fmt.Printf("–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %d –∏–∑ 2\n", tableCount)
		if tableCount == 0 {
			fmt.Println("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
			// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
			_, err = taskDB.Exec(`
				CREATE TABLE IF NOT EXISTS watchlist (
					id SERIAL PRIMARY KEY,
					coin VARCHAR(10) NOT NULL UNIQUE,
					created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
				);
				
				CREATE TABLE IF NOT EXISTS price_history (
					id SERIAL PRIMARY KEY,
					coin VARCHAR(10) NOT NULL,
					price DECIMAL(20, 8) NOT NULL,
					timestamp BIGINT NOT NULL,
					created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
					FOREIGN KEY (coin) REFERENCES watchlist(coin) ON DELETE CASCADE
				);
				
				CREATE INDEX IF NOT EXISTS idx_price_history_coin_timestamp ON price_history(coin, timestamp);
				CREATE INDEX IF NOT EXISTS idx_watchlist_coin ON watchlist(coin);
			`)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %v", err)
			} else {
				fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

				// –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
				fmt.Println("\n4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
				_, err = taskDB.Exec(`
					INSERT INTO watchlist (coin) VALUES ('BTC') ON CONFLICT (coin) DO NOTHING;
					INSERT INTO watchlist (coin) VALUES ('ETH') ON CONFLICT (coin) DO NOTHING;
					INSERT INTO price_history (coin, price, timestamp) VALUES 
						('BTC', 45000.50, 1736500490),
						('ETH', 3000.25, 1736500490);
				`)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
				} else {
					fmt.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
				}
			}
		} else if tableCount == 2 {
			fmt.Println("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã!")
		} else {
			fmt.Println("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
		}
	}

	fmt.Println("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: go run cmd/main.go")
}
