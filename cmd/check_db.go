package main

import (
	"crypto-watcher/internal/config"
	"database/sql"
	"fmt"
	"log"
	"time"

	_ "github.com/lib/pq"
)

func main() {
	fmt.Println("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
	fmt.Println("==============================")
	
	cfg := config.Load()
	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName)
	
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º watchlist
	fmt.Println("\nüìã Watchlist:")
	rows, err := db.Query("SELECT coin, created_at FROM watchlist ORDER BY created_at")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ watchlist: %v", err)
	} else {
		defer rows.Close()
		count := 0
		for rows.Next() {
			var coin string
			var createdAt time.Time
			rows.Scan(&coin, &createdAt)
			fmt.Printf("  %d. %s (–¥–æ–±–∞–≤–ª–µ–Ω: %s)\n", count+1, coin, createdAt.Format("15:04:05"))
			count++
		}
		if count == 0 {
			fmt.Println("  (–ø—É—Å—Ç–æ)")
		} else {
			fmt.Printf("–í—Å–µ–≥–æ: %d –º–æ–Ω–µ—Ç\n", count)
		}
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
	fmt.Println("\nüí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã (—Ç–æ–ø 10):")
	rows, err = db.Query(`
		SELECT coin, price, timestamp, created_at 
		FROM price_history 
		ORDER BY created_at DESC 
		LIMIT 10
	`)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ price_history: %v", err)
	} else {
		defer rows.Close()
		count := 0
		for rows.Next() {
			var coin string
			var price float64
			var timestamp int64
			var createdAt time.Time
			rows.Scan(&coin, &price, &timestamp, &createdAt)
			fmt.Printf("  %d. %s: $%.2f (–≤—Ä–µ–º—è: %s)\n", 
				count+1, coin, price, createdAt.Format("15:04:05"))
			count++
		}
		if count == 0 {
			fmt.Println("  (–ø—É—Å—Ç–æ)")
		}
		
		// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
		var total int
		db.QueryRow("SELECT COUNT(*) FROM price_history").Scan(&total)
		fmt.Printf("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: %d\n", total)
	}
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º
	fmt.Println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º:")
	rows, err = db.Query(`
		SELECT coin, COUNT(*) as count, MIN(price) as min_price, MAX(price) as max_price, AVG(price) as avg_price
		FROM price_history 
		GROUP BY coin 
		ORDER BY count DESC
	`)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
	} else {
		defer rows.Close()
		for rows.Next() {
			var coin string
			var count int
			var minPrice, maxPrice, avgPrice float64
			rows.Scan(&coin, &count, &minPrice, &maxPrice, &avgPrice)
			fmt.Printf("  %s: %d –∑–∞–ø–∏—Å–µ–π (–º–∏–Ω: $%.2f, –º–∞–∫—Å: $%.2f, —Å—Ä–µ–¥: $%.2f)\n", 
				coin, count, minPrice, maxPrice, avgPrice)
		}
	}
}
